/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute([{"revision":"dccc5dd679aa3dbb4c91cbb6700aa2cb","url":"asset-manifest.json"},{"revision":"1e99d123500d6b4cd4162166bf499c8e","url":"drugstore.png"},{"revision":"a35457e88f4adc9956b3c91eb452f8b6","url":"electron.js"},{"revision":"c92b85a5b907c70211f4ec25e29a8c4a","url":"favicon.ico"},{"revision":"1e03eff109bb74145344a7b7356ffc88","url":"index.html"},{"revision":"33dbdd0177549353eeeb785d02c294af","url":"logo192.png"},{"revision":"917515db74ea8d1aee6a246cfbcc0b45","url":"logo512.png"},{"revision":"cacbcef2fbd646b52c2dd45ec4257df2","url":"manifest.json"},{"revision":"a533df87abe9309d6083176f6fb52c36","url":"pharmacy.ico"},{"revision":"9fc7b5acae804b31196665cf1fd8622c","url":"pharmacy.png"},{"revision":"fa1ded1ed7c11438a9b0385b1e112850","url":"robots.txt"},{"revision":"24ed4051cbb5c873785fbfb15c8e5a1f","url":"service-worker.js"},{"revision":"dda6eb24305c602890b9fa2cacbaf56c","url":"static/css/2.fb17aa6d.chunk.css"},{"revision":"5bd8a7da761d6dc3bc2fea58e480b211","url":"static/css/main.264673a8.chunk.css"},{"revision":"8a98b3b3fbc947fd63175aaa7c8223fa","url":"static/js/2.435acb99.chunk.js"},{"revision":"1d56bbb5889c91322a3a626fd99122a4","url":"static/js/2.435acb99.chunk.js.LICENSE.txt"},{"revision":"41e3dce767cdec7e8e0616b52173445c","url":"static/js/3.a5268d89.chunk.js"},{"revision":"3d7529172d8d3bc79f9c1b6bc3414b2d","url":"static/js/main.2246d852.chunk.js"},{"revision":"18e77390ae6e8fb482470cb6490b4c86","url":"static/js/runtime-main.117a35ea.js"},{"revision":"1e99d123500d6b4cd4162166bf499c8e","url":"static/media/drugstore.2775c60a.png"}]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && (url.pathname.endsWith('.png') || url.pathname.endsWith('.jpg') || url.pathname.endsWith('.gif')), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 30 * 24 * 60 * 60 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
